#! /bin/sh -e

### BEGIN INIT INFO
# Provides:          x2goserver
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop the X2Go daemon
# Description:       The X2Go daemon is responsible for post-session clean-ups
### END INIT INFO

PATH='/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin'
XSOCKDIR='/tmp/.X11-unix'
DAEMON='/usr/sbin/x2gocleansessions'
PIDFILE='/var/run/x2goserver.pid'
NAME='X2Go Server clean-up daemon'

. '/lib/lsb/init-functions'

start()
{
		# Create socket dir if necessary.
		if [ ! -d "${XSOCKDIR}" ]
		then
			mkdir "${XSOCKDIR}"
			chmod '1777' "${XSOCKDIR}"
		fi

		log_daemon_msg "Starting ${NAME}" "${DAEMON##*/}"

		# Check if daemon is already running.
		local status='0'
		pidofproc -p "${PIDFILE}" "${DAEMON}" >'/dev/null'|| status="${?}"
		if [ '0' = "${status}" ]; then
			# It is, nothing else to do.
			log_end_msg '0'
			return '0'
		fi

		# Otherwise, start it.
		status='0'
		"${DAEMON}" || status="${?}"

		# Check if that was successful.
		if [ '0' != "${status}" ]; then
			log_end_msg "${status}"
			return "${status}"
		fi

		# It was, sleep a bit and ...
		sleep '1'

		# ... recheck its status, in case it died in-between.
		status='0'
		pidofproc -p "${PIDFILE}" "${DAEMON}" >'/dev/null' || status="${?}"
		log_end_msg "${status}"

		return "${status}"
}

stop()
{
		log_daemon_msg "Stopping ${NAME}" "${DAEMON##*/}"

		# Check if daemon is already dead.
		local status='0'
		pidofproc -p "${PIDFILE}" "${DAEMON}" >'/dev/null' || status="${?}"
		if [ '0' != "${status}" ]; then
			# It is, nothing else to do.
			log_end_msg '0'
			return '0'
		fi

		# Otherwise, let's kill it.
		status='0'
		# Make sure to truncate the command name to 15 characters because of Linux kernel limitations.
		# Also, hope that other kernels also limit the command name to 15 characters...
		local proc_name="$(echo "${DAEMON##*/}" | cut -c '1-15')"
		start-stop-daemon --stop --quiet --oknodo --name "${proc_name}" --pidfile "${PIDFILE}" || status="${?}"

		# Check its status.
		if [ '0' != "${status}" ]; then
			# Process wasn't killed, which is weird, since we made sure that it did via pidofproc.
			# Maybe the process name truncation had side-effects.
			# In any case, report the failure.
			log_end_msg "${status}"
			return "${status}"
		else
			# Otherwise, clean up PID file.
			pidofproc -p "${PIDFILE}" "${DAEMON}" >'/dev/null' || rm -f "${PIDFILE}"
		fi

		log_end_msg "${status}"
		return "${status}"
}

case "${1}" in
	start)
		start
	;;
	stop)
		stop
	;;
	reload|force-reload|restart)
		stop
		sleep '1'
		start
	;;
	status)
		status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}"
	;;
	*)
		N='/etc/init.d/x2goserver'
		echo "Usage: ${N} {start|stop|restart|force-reload}" >&2
		exit '1'
	;;
esac

exit '0'
