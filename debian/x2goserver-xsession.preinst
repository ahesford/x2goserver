#!/bin/sh
# preinst script for x2goserver-xsession
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

if dpkg --compare-versions -- "${DPKG_RUNNING_VERSION}" ge '1.17.14'; then
	dpkg-maintscript-helper 'dir_to_symlink' \
	  '/etc/x2go/Xsession.d' '/etc/X11/Xsession.d' '4.1.0.2-0~' 'x2goserver-xsession' -- "${@}"
else
	error() {
		echo "${PROGNAME}: error: ${*}" >&2
		exit '1'
	}

	ensure_package_owns_file() {
		local PACKAGE="${1}"
		local FILE="${2}"

		if ! dpkg-query -L "${PACKAGE}" | grep -F -q -x "${FILE}"; then
			return '1'
		fi
		return '0'
	}

	internal_pkg_must_own_file()
	{
		local PACKAGE="${1}"
		local FILE="${2}"

		if ! ensure_package_owns_file "${PACKAGE}" "${FILE}"; then
			error "file '${FILE}' not owned by package '${PACKAGE}'"
		fi

		return '0'
	}

	prepare_dir_to_symlink()
	{
		local PACKAGE="${1}"
		local PATHNAME="${2}"

		local LINE
		# If there are conffiles we should not perform the switch.
		dpkg-query -W -f='${Conffiles}\n' "${PACKAGE}" | while read -r LINE; do
			case "${LINE}" in
			"${PATHNAME}"/*)
				error "directory '${PATHNAME}' contains conffiles," \
				      "cannot switch to symlink"
				;;
			esac
		done

		# If there are locally created files or files owned by another package
		# we should not perform the switch.
		find "${PATHNAME}" -print0 | \
			xargs -0 -n1 ${0} _internal_pkg_must_own_file "${PACKAGE}" || \
			error "directory '${PATHNAME}' contains files not owned by" \
			      "package ${PACKAGE}, cannot switch to symlink"

		# At this point, we know that the directory either contains no files,
		# or only non-conffiles owned by the package.
		#
		# To do the switch we cannot simply replace it with the final symlink
		# just yet, because dpkg needs to remove any file present in the old
		# package that have disappeared in the new one, and we do not want to
		# lose files resolving to the same pathname in the symlink target.
		#
		# We cannot replace the directory with a staging symlink either,
		# because dpkg will update symlinks to their new target.
		#
		# So we need to create a staging directory, to avoid removing files
		# from other packages, and to trap any new files in the directory
		# to move them to their correct place later on.
		mv -f "${PATHNAME}" "${PATHNAME}.dpkg-backup"
		mkdir "${PATHNAME}"

		# Mark it as a staging directory, so that we can track things.
		touch "${PATHNAME}/.dpkg-staging-dir"
	}
fi

case "${1}" in
	'_internal_pkg_must_own_file')
		if dpkg --compare-versions -- "${DPKG_RUNNING_VERSION}" lt '1.17.14'; then
			# This is an internal command, must not be used outside this program.
			internal_pkg_must_own_file "${@}"
		else
			echo "${0} called with unknown argument '${1}'" >&2
			exit '1'
		fi
		;;
	'install'|'upgrade')
		if dpkg --compare-versions -- "${DPKG_RUNNING_VERSION}" lt '1.17.14'; then
			PACKAGE='x2goserver-xsession'
			PATHNAME='/etc/x2go/Xsession.d'
			[ -n "${2}" ] &&
			[ ! -h "${PATHNAME}" ] && [ -d "${PATHNAME}" ] &&
			if dpkg --compare-versions -- "${2}" le-nl '4.1.0.2-0~'; then
				prepare_dir_to_symlink "${PACKAGE}" "${PATHNAME}"
			fi
		fi
		;;
	'abort-upgrade')
		;;
	*)
		echo "${0} called with unknown argument '${1}'" >&2
		exit '1'
		;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit '0'
